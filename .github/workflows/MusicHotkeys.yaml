name: Build MusicHotkeys

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flet pystray pillow keyboard pyautogui

    - name: Set UTF-8 environment
      run: |
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ–≥–æ
        echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
        echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
        echo "FLEK_NO_EMOJI=1" >> $env:GITHUB_ENV

    - name: Create config files
      run: |
        # –°–æ–∑–¥–∞–µ–º config.txt
        @("next=pageup", "prev=pagedown", "pause=home", "mute=end", "volume_down=ins", "volume_up=del") | Out-File -Encoding utf8 config.txt
        
        # –°–æ–∑–¥–∞–µ–º flet.toml
        @('[project]', 'name = "musichotkeys"', 'version = "1.0.0"', 'dependencies = ["flet", "pystray", "pillow", "keyboard", "pyautogui"]', '', '[tool.flet]', 'product = "MusicHotkeys"', '', '[tool.flet.app]', 'path = "."') | Out-File -Encoding utf8 flet.toml

    - name: Build with disabled rich output
      run: |
        # –û—Ç–∫–ª—é—á–∞–µ–º –±–æ–≥–∞—Ç—ã–π –≤—ã–≤–æ–¥ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Unicode
        $env:TERM = "dumb"
        $env:PYTHONIOENCODING = "utf-8"
        flet build windows --verbose 2>&1 | Write-Output

    - name: Find and prepare executable
      run: |
        Write-Output "‚úÖ Flet build completed successfully!"
        Write-Output "Searching for executable..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≥–¥–µ flet –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
        $possiblePaths = @(
            "build\windows\runner\Release\MusicHotkeys.exe",
            "build\windows\MusicHotkeys.exe", 
            "build\MusicHotkeys.exe",
            "MusicHotkeys.exe",
            "build\windows\*\*.exe",
            "build\*\*.exe"
        )
        
        $found = $false
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $exeFile = Get-Item $path
                Write-Output "üéâ Found executable: $($exeFile.FullName)"
                Write-Output "Size: $([math]::Round($exeFile.Length / 1MB, 2)) MB"
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É dist –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ç—É–¥–∞
                New-Item -ItemType Directory -Path "dist" -Force
                Copy-Item -Path $exeFile.FullName -Destination "dist/MusicHotkeys.exe"
                $found = $true
                break
            }
        }
        
        if (-not $found) {
            Write-Output "‚ùå Executable not found in common paths. Full directory structure:"
            Write-Output "=== build directory ==="
            if (Test-Path "build") {
                Get-ChildItem -Path "build" -Recurse | Format-Table FullName, Length
            }
            Write-Output "=== root directory ==="
            Get-ChildItem -Filter "*.exe" -Recurse | Format-Table FullName, Length
            exit 1
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: MusicHotkeys
        path: build\windows\x64\runner\Release\music_hotkeys.exe


